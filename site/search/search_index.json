{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This homepages main purpuse is to document all my open source libraries in one place with the same styling.</p> <p>I do very often offer implementations for my libraries as optional extensions inside my other libraries and all my libraries do play together very nicely so this page is a good starting point to check out what I do offer.</p>"},{"location":"#projects","title":"Projects","text":"<p>Check out the open source projects section to see all the projects that are available and documented here or get an overview below.</p>"},{"location":"#overview","title":"Overview","text":"Image Library Description Utilities \u2060 \u2060 CacheFileProvider This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps). FeedbackManager This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification. Libraries \u2060 \u2060 Lumberjack This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device. KotPreferences With this library you can declare preferences via kotlin delegates and observe and update them via kotlin Flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already. KotBilling A kotlin coroutine based solution for handling in app purchases for billing library version 6. Compose Libraries \u2060 \u2060 ComposeDialogs This library offers you an easily extendible compose framework for modal dialogs and allows to show them as a dialog or a bottom sheet. ComposePreferences This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences. ComposeChangelog This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation. ComposeThemer This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app. ComposeDebugDrawer This library offers you a simple and easily extendable debug drawer."},{"location":"#source-code","title":"Source Code","text":"<p>https://github.com/MFlisar/github-docs</p>"},{"location":"#usages-and-state","title":"Usages and State","text":"Library Version Readme Documentation Used In Utilities \u2060 \u2060 \u2060 \u2060 CacheFileProvider \u2713 \u2713 \u2022 FeedbackManager FeedbackManager \u2713 \u2713 \u2022 Lumberjack Libraries \u2060 \u2060 \u2060 \u2060 Lumberjack \u2713 \u2713 \u2022 ComposeDebugDrawer KotPreferences \u2713 \u2713 \u2022 ComposePreferences\u2022 ComposeChangelog\u2022 ComposeDebugDrawer KotBilling \u2713 \u2713 \u2022 ComposeDialogs Compose \u2060 \u2060 \u2060 \u2060 ComposeDialogs \u2713 \u2713 \u2022 ComposePreferences ComposePreferences \u2713 \u2713 - ComposeChangelog \u2713 \u2713 - ComposeThemer \u2713 \u2713 - ComposeDebugDrawer \u2713 \u2713 - <p>Dependencies as graph</p>"},{"location":"pages/","title":"My Open Source Projects","text":"<p>All my open source projects are hosted on github. My newer ones are documented here, others are only documented on github directly.</p> <p>Check out my different libraries in the sidebar.</p>"},{"location":"pages/compose/","title":"My Compose Libraries","text":"<p>Here I collect my compose libraries.</p> <ul> <li> ComposeDialogs</li> <li> ComposePreferences</li> <li> ComposeChangelog</li> <li> ComposeThemer</li> <li> ComposeDebugDrawer</li> </ul>"},{"location":"pages/compose/composechangelog/","title":"ComposeChangelog","text":"<p>This library offers you a a changelog dialog for compose including the ability to show new logs on app start only as well as filtering and customisation.</p>"},{"location":"pages/compose/composechangelog/#screenshots","title":"Screenshots","text":"Dialogs"},{"location":"pages/compose/composechangelog/#features","title":"Features","text":"<ul> <li>filtering<ul> <li>useful to filter out uninteresting old changelog entries on app start</li> <li>useful for filtering changelog based on build flavour</li> </ul> </li> <li>also supports automatic handling of showing changelogs on app start (uses preference to save last seen changelog version and handles everything for you automatically to only show new changelogs and only show those once)</li> <li>customise look<ul> <li>you can provide custom composables for every item type if desired</li> <li>you can provide custom version name formatter</li> <li>you can provide a custom sorter</li> </ul> </li> <li>supports raw and xml resources, default resource name is <code>changelog.xml</code> in raw folder</li> <li>supports summaries with a \"show more\" button</li> </ul> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"pages/compose/composechangelog/#dependencies","title":"Dependencies","text":"<p>Compose</p> Dependency Version Infos Compose BOM <code>2024.02.01</code> Mapping Material3 <code>1.2.0</code> <p>Library</p> Module Dependency Version <code>core</code> - Extensions \u2060 \u2060 <code>statesaver-preferences</code> - <code>statesaver-kotpreferences</code> KotPreferences 0.3"},{"location":"pages/compose/composechangelog/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval composechangelog = \"&lt;LATEST-VERSION&gt;\" \n\n// include necessary modules\n\n// core module\nimplementation(\"com.github.MFlisar.ComposeChangelog:core:$composechangelog\")\n\n// statesaver modules\nimplementation(\"com.github.MFlisar.ComposeChangelog:statesaver-preferences:$composechangelog\")\nimplementation(\"com.github.MFlisar.ComposeChangelog:statesaver-kotpreferences:$composechangelog\")\n</code></pre>"},{"location":"pages/compose/composechangelog/#usage","title":"Usage","text":"<p>It works as simple as following:</p> Define your changelog as raw xml file raw/changelog.xml<pre><code>&lt;changelog&gt;\n    &lt;release versionCode=\"120\" date=\"2023-03-04\"&gt;\n        &lt;info&gt;Some info 1 - apostrophe test: it's weird, but apostrophes do not work in precompiled xml files placed in xml resources!&lt;/info&gt;\n        &lt;new type=\"summary\"&gt;Some improvement 1&lt;/new&gt;\n        &lt;bugfix&gt;Some bugfix 1&lt;/bugfix&gt;\n        &lt;info&gt;Some info 2&lt;/info&gt;\n        &lt;new type=\"summary\"&gt;Some improvement 2&lt;/new&gt;\n        &lt;bugfix&gt;Some bugfix 2&lt;/bugfix&gt;\n        &lt;info&gt;Some info 3&lt;/info&gt;\n        &lt;new&gt;Some improvement 3&lt;/new&gt;\n        &lt;bugfix&gt;Some bugfix 3&lt;/bugfix&gt;\n        &lt;customTag&gt;My custom tag text...&lt;/customTag&gt;\n    &lt;/release&gt;\n    &lt;release versionCode=\"118\" date=\"2023-03-04\"&gt;\n        &lt;new type=\"summary\"&gt;This version has a summary item only - no show more button will be shown even if show more buttons are enabled&lt;/new&gt;\n    &lt;/release&gt;\n    &lt;release versionCode=\"115\" date=\"2023-03-04\"&gt;\n        &lt;info&gt;Some info&lt;/info&gt;\n        &lt;new type=\"summary\"&gt;Some improvement&lt;/new&gt;\n        &lt;bugfix&gt;Some bugfix&lt;/bugfix&gt;\n    &lt;/release&gt;\n    &lt;release versionCode=\"110\" versionName=\"Version 1.10\" date=\"2023-03-03\" filter=\"dogs\"&gt;\n        &lt;info&gt;Some dogs info - filter only set in release tag&lt;/info&gt;\n        &lt;new type=\"summary\"&gt;Some dogs improvement - filter only set in release tag&lt;/new&gt;\n        &lt;bugfix&gt;Some dogs bugfix - filter only set in release tag&lt;/bugfix&gt;\n    &lt;/release&gt;\n    &lt;release versionCode=\"105\" versionName=\"Version 1.05\" date=\"2023-03-02\" filter=\"cats\"&gt;\n        &lt;info type=\"summary\"&gt;single summary of version 1.05&lt;/info&gt;\n        &lt;info&gt;Some cats info - filter only set in release tag&lt;/info&gt;\n        &lt;new&gt;Some cats improvement - filter only set in release tag&lt;/new&gt;\n        &lt;bugfix&gt;Some cats bugfix - filter only set in release tag&lt;/bugfix&gt;\n    &lt;/release&gt;\n    &lt;release versionCode=\"100\" versionName=\"First release\" date=\"2023-03-01\"&gt;\n        &lt;info filter=\"cats\" type=\"summary\"&gt;single cats summary of version 1.00&lt;/info&gt;\n        &lt;info filter=\"dogs\" type=\"summary\"&gt;single dogs summary of version 1.00&lt;/info&gt;\n        &lt;info filter=\"cats\"&gt;New cats added - this info has filter text 'cats'&lt;/info&gt;\n        &lt;info filter=\"dogs\"&gt;New dogs added - this info has filter text 'dogs'&lt;/info&gt;\n        &lt;new filter=\"cats\"&gt;Some cats improvement - this info has filter text 'cats'&lt;/new&gt;\n        &lt;new filter=\"dogs\"&gt;Some dogs improvement - this info has filter text 'dogs'&lt;/new&gt;\n        &lt;bugfix filter=\"cats\"&gt;Some cats bugfix - this info has filter text 'cats'&lt;/bugfix&gt;\n        &lt;bugfix filter=\"dogs\"&gt;Some dogs bugfix - this info has filter text 'dogs'&lt;/bugfix&gt;\n    &lt;/release&gt;\n    &lt;release versionCode=\"90\" versionName=\"First beta\" date=\"2023-02-01\"&gt;\n        &lt;info&gt;this release does not have any summary item and will be shown expanded even if summary is enabled - this behaviour can be adjusted by the second parameter in the builder with which you enable summaries&lt;/info&gt;\n    &lt;/release&gt;\n&lt;/changelog&gt;\n</code></pre> Show the interesting parts of the changelog on app start <pre><code>// 1) we need a state saver to persist the version for which the changelog was last shown\n// use either of the following 2 or implement the corresponding interface yourself\nval changelogStateSaver = ChangelogStateSaverPreferences(LocalContext.current)\nval changelogStateSaverKotPrefs = ChangelogStateSaverKotPreferences(AppPrefs.lastShownVersionForChangelog)\n\n// 2) optional - here you can apply some customisations like changelog resource id, localized texts, styles, filter, sorter, renderer...\nval setup = ChangelogDefaults.setup()\n\n// 3) show the changelog for the app start - this will only show the changelogs that the user did not see yet\nChangelog.CheckedShowChangelog(changelogStateSaver, setup)\n</code></pre> Show the full changelog <pre><code>// 1) we need a state to decide if we need to show the changelog or not\nvar showChangelog by remember { mutableStateOf(false) }\n\n// 2) we need some event source\nButton(onClick = { showChangelog = true }) {\n    Text(\"Show Changelog\")\n}\n\n// 3) we show the changelog if necessary\nif (showChangelog) {\n    // optional setup...\n    val setup = ChangelogDefaults.setup()\n    Changelog.ShowChangelogDialog(setup) {\n        // this is the dismiss callback, here we must reset the showChangelog flag\n        showChangelog = false\n    }\n}\n</code></pre>"},{"location":"pages/compose/composechangelog/#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"pages/compose/composedebugdrawer/","title":"ComposeDebugDrawer","text":"<p>This library offers you a simple and easily extendable debug drawer.</p>"},{"location":"pages/compose/composedebugdrawer/#screenshots","title":"Screenshots","text":"Demos"},{"location":"pages/compose/composedebugdrawer/#features","title":"Features","text":"<ul> <li>easily extendible</li> <li>one line integration</li> <li>can be easily enabled/diabled in debug/release builds or based on a user setting</li> <li>predefined optional modules</li> </ul> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"pages/compose/composedebugdrawer/#dependencies","title":"Dependencies","text":"<p>Compose</p> Dependency Version Infos Compose BOM <code>2024.02.01</code> Mapping Material3 <code>1.2.0</code> <p>Library</p> Module Dependency Version <code>core</code> - Info Modules \u2060 \u2060 <code>infos-build</code> - <code>infos-device</code> - Plugins \u2060 \u2060 <code>plugin-lumberjack</code> Lumberjack 6.0.2 <code>plugin-kotpreferences</code> KotPreferences 0.3"},{"location":"pages/compose/composedebugdrawer/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval composedebugdrawer = \"&lt;LATEST-VERSION&gt;\" \n\n// include necessary modules\n\n// core module\nimplementation(\"com.github.MFlisar.ComposeDebugDrawer:core:$composedebugdrawer\")\n\n// info modules\nimplementation(\"com.github.MFlisar.ComposeDebugDrawer:infos-build:$composedebugdrawer\")\nimplementation(\"com.github.MFlisar.ComposeDebugDrawer:infos-device:$composedebugdrawer\")\n\n// plugin modules\nimplementation(\"com.github.MFlisar.ComposeDebugDrawer:plugin-lumberjack:$composedebugdrawer\")\nimplementation(\"com.github.MFlisar.ComposeDebugDrawer:plugin-kotpreferences:$composedebugdrawer\")\n</code></pre>"},{"location":"pages/compose/composedebugdrawer/#usage","title":"Usage","text":"<p>It works as simple as following:</p> DebugDrawer <pre><code>// wrap your app content inside the drawer like following\nval drawerState = rememberDebugDrawerState()\nComposeAppTheme  {\n    DebugDrawer(\n        enabled = BuildConfig.DEBUG, // if disabled the drawer will not be created at all, in this case inside a release build...\n        drawerState = drawerState,\n        drawerContent = {\n            // drawer content\n        },\n        content = {\n            // your wrapped app content\n        }\n    )\n}\n</code></pre> Example Drawer Content <pre><code>@Composable\nprivate fun Drawer(drawerState: DebugDrawerState) {\n    DebugDrawerBuildInfos(drawerState)\n    DebugDrawerActions(drawerState)\n    DebugDrawerDeviceInfos(drawerState)\n\n    // lumberjack module for logs\n    DebugDrawerLumberjack(\n        drawerState = drawerState,\n        setup = DemoLogging.fileLoggingSetup,\n        mailReceiver = \"feedback@gmail.com\"\n    )\n\n    // kotpreferences module for delegate based preferences (another library of mine)\n    DebugDrawerRegion(\n        icon = Icons.Default.ColorLens,\n        label = \"Demo Preferences\",\n        drawerState = drawerState\n    ) {\n        DebugDrawerDivider(info = \"Boolean\")\n        DebugDrawerSettingCheckbox(setting = DemoPrefs.devBoolean1)\n        DebugDrawerSettingCheckbox(setting = DemoPrefs.devBoolean2)\n        DebugDrawerDivider(info = \"Enum\")\n        DebugDrawerSettingDropdown(setting = DemoPrefs.devStyle,items = DemoPrefs.UIStyle.values())\n    }\n\n    // manual checkboxes, dropdowns, infos\n    DebugDrawerRegion(\n        icon = Icons.Default.Info,\n        label = \"Manual\",\n        drawerState = drawerState\n    ) {\n        // Checkbox\n        var test1 by remember { mutableStateOf(false) }\n        DebugDrawerCheckbox(\n            label = \"Checkbox\",\n            description = \"Some debug flag\",\n            checked = test1\n        ) {\n            test1 = it\n        }\n\n        // Button\n        DebugDrawerButton(\n            icon = Icons.Default.BugReport, \n            label = \"Button (Filled)\"\n        ) {\n            // on click\n        }\n\n        // Dropdown\n        val items = listOf(\"Entry 1\", \"Entry 2\", \"Entry 3\")\n        var selected by remember { mutableStateOf(items[0]) }\n        DebugDrawerDropdown(\n            modifier = modifier,\n            label = \"Items\",\n            selected = selected,\n            items = items\n        ) {\n            selected = it\n        }\n\n        // Sectioned Button\n        val items2 = listOf(\"L1\", \"L2\", \"L3\")\n        val level = remember { mutableStateOf(items2[0]) }\n        DebugDrawerSegmentedButtons(\n            selected = level, \n            items = items2\n        )\n\n        // Info\n        DebugDrawerInfo(title = \"Custom Info\", info = \"Value of custom info...\")\n    }\n}\n</code></pre>"},{"location":"pages/compose/composedebugdrawer/#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"pages/compose/composedebugdrawer/#modules-and-extensions","title":"Modules and Extensions","text":"Module Build Infos <p>This simple module allows you to add a build info region to the debug drawer.</p> <pre><code>DebugDrawerBuildInfos(drawerState)\n</code></pre> Module Device Infos <p>This simple module allows you to add a device info region to the debug drawer.</p> <pre><code>DebugDrawerDeviceInfos(drawerState)\n</code></pre> Extension Lumberjack <p>This simple module allows you to add a region for my lumberjack logging library. And will show buttons to show the log file, send it via mail or to clear it.</p> DebugDrawerLumberjack.kt<pre><code>fun DebugDrawerLumberjack(\n    setup: IFileLoggingSetup,\n    mailReceiver: String,\n    icon: ImageVector? = Icons.Default.Description,\n    drawerState: DebugDrawerState,\n    label: String = \"Logging\",\n    id: String = label,\n    collapsible: Boolean = true,\n    content: @Composable ColumnScope.() -&gt; Unit = {}\n) {\n</code></pre> Extension KotPreferences <p>This simple module allows you to use my delegate based preference library KotPreferences inside the debug drawer. With this extension labels are e.g. directly derived from the <code>KotPreference</code> property. It offers overloads for <code>Checkbox</code>, <code>Dropdown</code> and <code>SegmentedButton</code> debug drawer fields.</p> DebugDrawerKotPreferences.kt<pre><code> fun DebugDrawerSettingCheckbox(\n     modifier: Modifier = Modifier,\n     setting: StorageSetting&lt;Boolean&gt;,\n     icon: ImageVector? = null,\n     foregroundTint: Color? = null,\n     label: String = setting.getDebugLabel(),\n     description: String = \"\"\n ) {\n</code></pre> DebugDrawerKotPreferences.kt<pre><code> fun &lt;E : Enum&lt;E&gt;&gt; DebugDrawerSettingDropdown(\n     modifier: Modifier = Modifier,\n     setting: StorageSetting&lt;E&gt;,\n     items: Array&lt;E&gt;,\n     icon: ImageVector? = null,\n     label: String = setting.getDebugLabel()\n ) {\n</code></pre> DebugDrawerKotPreferences.kt<pre><code> fun &lt;E : Enum&lt;E&gt;&gt; DebugDrawerSettingSegmentedButtons(\n     modifier: Modifier = Modifier,\n     setting: StorageSetting&lt;E&gt;,\n     items: Array&lt;E&gt;,\n     icon: ImageVector? = null\n ) {\n</code></pre>"},{"location":"pages/compose/composedialogs/","title":"ComposeDialogs","text":"<p>This library offers you an easily extendible compose framework for modal dialogs and allows to show them as a dialog or a bottom sheet.</p>"},{"location":"pages/compose/composedialogs/#screenshots","title":"Screenshots","text":"Info Dialog \u2060 \u2060 \u2060 Input Dialog \u2060 \u2060 \u2060 Number Dialog \u2060 \u2060 \u2060 Date Dialog \u2060 \u2060 \u2060 Time Dialog \u2060 \u2060 \u2060 Color Dialog \u2060 \u2060 \u2060 List Dialog \u2060 \u2060 \u2060 Progress Dialog \u2060 \u2060 \u2060"},{"location":"pages/compose/composedialogs/#features","title":"Features","text":"<ul> <li>with this ibrary you get a very simple way to show dialogs</li> <li>supports showing dialogs as dialogs  or bottom sheets</li> <li>easily extendible - creating a new dialog is just a few lines of code</li> </ul> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"pages/compose/composedialogs/#dependencies","title":"Dependencies","text":"<p>Compose</p> Dependency Version Infos Compose BOM <code>2024.02.01</code> Mapping Material3 <code>1.2.0</code> <p>Library</p> Module Dependency Version <code>core</code> - <code>dialog-info</code> - <code>dialog-input</code> - <code>dialog-number</code> - <code>dialog-list</code> - <code>dialog-progress</code> - <code>dialog-time</code> - <code>dialog-date</code> - <code>dialog-color</code> - <code>dialog-billing</code> KotBilling 0.6"},{"location":"pages/compose/composedialogs/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval composedialogs = \"&lt;LATEST-VERSION&gt;\" \n\n// include necessary modules\n\n// core module\nimplementation(\"com.github.MFlisar.ComposeDialogs:core:$composedialogs\")\n\n// dialogs modules\nimplementation(\"com.github.MFlisar.ComposeDialogs:dialog-info:$composedialogs\")\nimplementation(\"com.github.MFlisar.ComposeDialogs:dialog-input:$composedialogs\")\nimplementation(\"com.github.MFlisar.ComposeDialogs:dialog-number:$composedialogs\")\nimplementation(\"com.github.MFlisar.ComposeDialogs:dialog-list:$composedialogs\")\nimplementation(\"com.github.MFlisar.ComposeDialogs:dialog-progress:$composedialogs\")\nimplementation(\"com.github.MFlisar.ComposeDialogs:dialog-time:$composedialogs\")\nimplementation(\"com.github.MFlisar.ComposeDialogs:dialog-date:$composedialogs\")\nimplementation(\"com.github.MFlisar.ComposeDialogs:dialog-color:$composedialogs\")\nimplementation(\"com.github.MFlisar.ComposeDialogs:dialog-billing:$composedialogs\")\n</code></pre>"},{"location":"pages/compose/composedialogs/#usage","title":"Usage","text":"<pre><code>// create and remember a state\nval state = rememberDialogState()\n\n// show a dialog if necessary\nif (state.showing)\n{\n    DialogInfo(\n        state = state,\n        // Custom - Required\n        info: String,\n        // Custom - Optional\n        infoLabel: String = \"\",\n        // Base Dialog -  Optional - all options can be set up with custom attributes, following are just the default examples\n        title: (@Composable () -&gt; Unit)? = null,\n        icon: (@Composable () -&gt; Unit)? = null,\n        style: DialogStyle = DialogDefaults.styleDialog(), // DialogDefaults.styleBottomSheet() =&gt; both have a few settings...\n        buttons: DialogButtons = DialogDefaults.buttons(),\n        options: Options = Options(),\n        onEvent: (event: DialogEvent) -&gt; Unit = {\n            // optional event handler for all dialog events\n        }\n    )\n}\n\n// show the dialog inside a button press event or similar\nButton(onClick = { state.show() }) {\n    Text(\"Show Dialog\")\n}\n</code></pre> <p>Alternatively, if you want to use one dialog with many items (e.g. for list items) you can do following:</p> <pre><code>// create and remember a state with data (e.g. an Integer)\nval state = rememberDialogState&lt;Int&gt;(data = null)\n\n// show a dialog if necessary\nif (state.showing)\n{\n    val data = state.requireData()\n    DialogInfo(\n        state = state,\n        // Custom - Required\n        info = \"Data = $data\"\n    )\n}\n\n// a list that uses the dialog\nval items = 1..100\nLazyColumn {\n    items.forEach {\n        item(key = it) {\n            Button(onClick = { state.show(it) }) {\n                Text(\"Item $it\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"pages/compose/composedialogs/#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"pages/compose/composedialogs/#modules-and-extensions","title":"Modules and Extensions","text":"Info Dialog Preview Module <code>info</code> <p>This shows a simple dialog with some informational text.</p> DialogInfo.kt<pre><code>fun DialogInfo(\n    state: DialogState,\n    // Custom - Required\n    info: String,\n    // Custom - Optional\n    infoLabel: String = \"\",\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n</code></pre> Input Dialog Preview Module <code>input</code> <p>This shows a dialog with a <code>InputField</code>. All its parameters are exposed via the compose function as you can see below, which allows you to simply adjust the <code>InputField</code>s behaviour. Additinally you can attach a validator which ensures, that the dialog will only return a valid input and can't be closed otherwise.</p> DialogInput.kt<pre><code>fun DialogInput(\n    // Base Dialog - State\n    state: DialogState,\n    // Custom - Required\n    input: MutableState&lt;String&gt;,\n    inputLabel: String = \"\",\n    // Custom - Optional\n    inputPlaceholder: String = \"\",\n    singleLine: Boolean = false,\n    maxLines: Int = if (singleLine) 1 else Int.MAX_VALUE,\n    minLines: Int = 1,\n    keyboardOptions: KeyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),\n    enabled: Boolean = true,\n    clearable: Boolean = true,\n    prefix: String = \"\",\n    suffix: String = \"\",\n    textStyle: TextStyle = LocalTextStyle.current,\n    validator: DialogInputValidator = rememberDialogInputValidator(),\n    requestFocus: Boolean = false,\n    selectionState: DialogInput.SelectionState = DialogInput.SelectionState.Default,\n    onTextStateChanged: (valid: Boolean, text: String) -&gt; Unit = { _, _ -&gt; },\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n</code></pre> Number Dialog Preview Module <code>number</code> <p>This shows a number picker dialog. You can always use the Input Dialog  for numbers as well and change its options to accept numbers only and even attach an validator. But this one is meant for picking numbers with the help of one or two increase and decrease buttons.</p> DialogNumberPicker.kt<pre><code>fun &lt;T : Number&gt; DialogNumberPicker(\n    // Base Dialog - State\n    state: DialogState,\n    // Custom - Required\n    value: MutableState&lt;T&gt;,\n    setup: NumberPickerSetup&lt;T&gt;,\n    iconDown: @Composable () -&gt; Unit = {\n        Icon(imageVector = Icons.Default.KeyboardArrowLeft, contentDescription = null)\n    },\n    iconUp: @Composable () -&gt; Unit = {\n        Icon(imageVector = Icons.Default.KeyboardArrowRight, contentDescription = null)\n    },\n    iconDown2: @Composable () -&gt; Unit = {\n        Icon(imageVector = Icons.Default.KeyboardDoubleArrowLeft, contentDescription = null)\n    },\n    iconUp2: @Composable () -&gt; Unit = {\n        Icon(imageVector = Icons.Default.KeyboardDoubleArrowRight, contentDescription = null)\n    },\n    formatter: (value: T) -&gt; String = { it.toString() },\n    // Custom - Optional\n    textStyle: TextStyle = MaterialTheme.typography.bodyMedium,\n    onValueStateChanged: (value: T) -&gt; Unit = { },\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n</code></pre> Date Dialog Preview Module <code>date</code> <p>This shows a date selector dialog. First day of week, labels, and style can be adjusted to your needs.</p> <pre><code>fun DialogDate(\n    state: DialogState,\n    // Custom - Required\n    date: MutableState&lt;LocalDate&gt;,\n    // Custom - Optional\n    dateRange: DialogDate.Range = DialogDateDefaults.dateRange(),\n    setup: DialogDate.Setup = DialogDateDefaults.setup(),\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n</code></pre> Time Dialog Preview Module <code>time</code> <p>This shows a time selector dialog. 24h mode is optional.</p> DialogTime.kt<pre><code>fun DialogTime(\n    state: DialogState,\n    // Custom - Required\n    time: MutableState&lt;LocalTime&gt;,\n    // Custom - Optional\n    setup: DialogTime.Setup = DialogTimeDefaults.setup(),\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n</code></pre> Color Dialog Preview Module <code>color</code> <p>This shows a color selector dialog. A table with predefined material colors as well as a customisation page will be shown. Alpha support can be enabled optionally.</p> <pre><code>fun DialogColor(\n    // Base Dialog - State\n    state: DialogState,\n    // Custom - Required\n    color: MutableState&lt;Color&gt;,\n    // Custom - Optional\n    texts: DialogColor.Texts = DialogColorDefaults.texts(),\n    alphaSupported: Boolean = true,\n    shape: Shape = MaterialTheme.shapes.small,\n    gridSize: Int = if (LocalConfiguration.current.orientation == Configuration.ORIENTATION_LANDSCAPE) 6 else 4,\n    labelStyle: DialogColor.LabelStyle = DialogColor.LabelStyle.Value,\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n</code></pre> List Dialog Preview Module <code>list</code> <code>list</code> <p>This shows a dialog with a list of items. Rendering, selection mode and more is adjustable.</p> <p>Here you can create a dialog based on static list data like following:</p> DialogList.kt<pre><code>fun &lt;T&gt; DialogList(\n    state: DialogState,\n    // Custom - Required\n    items: List&lt;T&gt;,\n    itemIdProvider: (item: T) -&gt; Int,\n    itemContents: DialogList.ItemContents&lt;T&gt;,\n    selectionMode: DialogList.SelectionMode&lt;T&gt;,\n    // Custom - Optional\n    divider: Boolean = false,\n    description: String = \"\",\n    filter: DialogList.Filter&lt;T&gt;? = null,\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n</code></pre> <p>But you can also create list with an asynchronous loader function like following:</p> DialogList.kt<pre><code>fun &lt;T&gt; DialogList(\n    state: DialogState,\n    // Custom - Required\n    itemsLoader: suspend () -&gt; List&lt;T&gt;,\n    itemIdProvider: (item: T) -&gt; Int,\n    itemContents: DialogList.ItemContents&lt;T&gt;,\n    selectionMode: DialogList.SelectionMode&lt;T&gt;,\n    // Custom - Optional\n    itemSaver: Saver&lt;MutableState&lt;List&lt;T&gt;&gt;, out Any&gt;? = null,\n    loadingIndicator: @Composable () -&gt; Unit = {\n        Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {\n            CircularProgressIndicator()\n        }\n    },\n    divider: Boolean = false,\n    description: String = \"\",\n    filter: DialogList.Filter&lt;T&gt;? = null,\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n</code></pre> Progress Dialog Preview Module <code>progress</code> <p>This shows a simple loading dialog with a progress indicator.</p> DialogProgress.kt<pre><code>fun DialogProgress(\n    state: DialogState,\n    // Custom - Required\n    // ...\n    // Custom - Optional\n    label: String = \"\",\n    progressStyle: DialogProgress.Style = DialogProgress.Style.Indeterminate(),\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n</code></pre> Billing Dialog <p>This shows a dialog with the prices and names of your products. It also shows if a product is already owned and allows to buy unowned prodcuts by clicking them.</p> DialogBilling.kt<pre><code>fun DialogBilling(\n    state: DialogState,\n    // custom settings\n    products: List&lt;DialogBilling.BillingProduct&gt;,\n    texts: DialogBilling.Texts = DialogBillingDefaults.texts(),\n    // Base Dialog - Optional\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    //buttons: DialogButtons = DialogDefaults.buttons(),\n    //options: Options = Options(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {}\n) {\n</code></pre> Custom Dialog Dialog.kt<pre><code>fun Dialog(\n    state: DialogState,\n    title: (@Composable () -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    style: DialogStyle = DialogDefaults.styleDialog(),\n    buttons: DialogButtons = DialogDefaults.buttons(),\n    options: Options = Options(),\n    specialOptions: SpecialOptions = SpecialOptions(),\n    onEvent: (event: DialogEvent) -&gt; Unit = {},\n    content: @Composable ColumnScope.() -&gt; Unit\n) {\n</code></pre> <pre><code>Dialog(state, title, icon, style, buttons, options, onEvent = onEvent) {\n    Text(\"Text in custom dialog\")\n    // ...\n}\n</code></pre>"},{"location":"pages/compose/composedialogs/#advanced-usage","title":"Advanced Usage","text":"<p>Check out the dialog state and the dialogs to find out what settings you can use and especially the demo app for a working example.</p> <p>Dialog State (simple with a boolean flag or complex with a data object)</p> <p>In case of the simple state <code>true</code> means that the dialog is visible and <code>false</code> that it's not. In case of the complex state holding an object means the dialog is visible and <code>null</code> means it's not visible.</p> <pre><code>fun rememberDialogState(\n    showing: Boolean = false,\n    buttonPositiveEnabled: Boolean = true,\n    buttonNegativeEnabled: Boolean = true,\n    dismissAllowed: Boolean = true,\n    swipeAllowed: Boolean = true\n): DialogState {\n</code></pre> <p>In case of the complex state simply use <code>state.show(data)</code> to show the dialog and then inside your dialog call <code>val data = state.requireData()</code> to get the data from the state.</p> <p>CAUTION: the state must be saveable by <code>Bundle</code>, if it is not, provide a custom <code>saver</code>!</p> <pre><code>fun &lt;T : Any&gt; rememberDialogState(\n    data: T?,\n    saver: Saver&lt;MutableState&lt;T?&gt;, out Any&gt; = autoSaver(),\n    buttonPositiveEnabled: Boolean = true,\n    buttonNegativeEnabled: Boolean = true,\n    dismissAllowed: Boolean = true,\n    swipeAllowed: Boolean = true\n): DialogStateWithData&lt;T&gt; {\n</code></pre>"},{"location":"pages/compose/composepreferences/","title":"ComposePreferences","text":"<p>This library offers you preference screens for compose including the ability of endless nesting subscreens as well as simple integration of custom preferences.</p>"},{"location":"pages/compose/composepreferences/#screenshots","title":"Screenshots","text":"Screenshots"},{"location":"pages/compose/composepreferences/#features","title":"Features","text":"<ul> <li>offers a simple <code>PreferenceScreen</code> composable</li> <li>does offer all common used preferences</li> <li>manages nesting, visibilities and dependencies for you</li> <li>can be easily extended</li> </ul> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"pages/compose/composepreferences/#dependencies","title":"Dependencies","text":"<p>Compose</p> Dependency Version Infos Compose BOM <code>2024.02.01</code> Mapping Material3 <code>1.2.0</code> <p>Library</p> Module Dependency Version <code>core</code> - Screens \u2060 \u2060 <code>screen-bool</code> - <code>screen-button</code> - <code>screen-input</code> ComposeDialogs 1.0.5 <code>screen-color</code> ComposeDialogs 1.0.5 <code>screen-date</code> ComposeDialogs 1.0.5 <code>screen-time</code> ComposeDialogs 1.0.5 <code>screen-list</code> ComposeDialogs 1.0.5 <code>screen-number</code> ComposeDialogs 1.0.5 Extensions \u2060 \u2060 <code>extension-kotpreferences</code> KotPreferences 0.3"},{"location":"pages/compose/composepreferences/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval composepreferences = \"&lt;LATEST-VERSION&gt;\" \n\n// include necessary modules\n\n// core module\nimplementation(\"com.github.MFlisar.ComposePreferences:core:$composepreferences\")\n\n// screen modules\nimplementation(\"com.github.MFlisar.ComposePreferences:screen-bool:$composepreferences\")\nimplementation(\"com.github.MFlisar.ComposePreferences:screen-button:$composepreferences\")\nimplementation(\"com.github.MFlisar.ComposePreferences:screen-input:$composepreferences\")\nimplementation(\"com.github.MFlisar.ComposePreferences:screen-color:$composepreferences\")\nimplementation(\"com.github.MFlisar.ComposePreferences:screen-date:$composepreferences\")\nimplementation(\"com.github.MFlisar.ComposePreferences:screen-time:$composepreferences\")\nimplementation(\"com.github.MFlisar.ComposePreferences:screen-list:$composepreferences\")\nimplementation(\"com.github.MFlisar.ComposePreferences:screen-number:$composepreferences\")\n\n// extension module\nimplementation(\"com.github.MFlisar.ComposePreferences:extension-kotpreferences:$composepreferences\")\n</code></pre>"},{"location":"pages/compose/composepreferences/#usage","title":"Usage","text":"<p>It works as simple as following:</p> <pre><code>// Preferences must be wrapped in a screen\n// =&gt; this allows to manage internal hierarchy and screen nesting and everything is managed automatically\n// =&gt; this also enables internal scrolling\nPreferenceScreen(\n    // optional parameters to customise this screen\n    settings =  PreferenceSettingsDefaults.settings(),\n    scrollable = true\n) {\n    // Preferences at root level\n    PreferenceInfo(\n        title = {  Text(\"Info 1\") }\n    )\n    PreferenceBool(\n        style = PreferenceBool.Style.Switch,\n        value = &lt;value&gt;,\n        onValueChange = {\n            // update value here\n        },\n        title = { Text(\"Bool\") }\n        )\n\n    // Sub Preference - all nested preferences will show if you click the sub preference (and all preferences from other levels will be hidden automatically)\n    // + back press + state saving will be handled automatically\n    PreferenceSubScreen(\n        title = { Text(\"Menu\") }\n    ) {\n        // sub preferences must be placed here\n        // you can even nest another PreferenceSubScreen here - any nesting depth is supported!\n    }\n\n    // IMPORTANT:\n    // don't place any non preference composables here, they won't be correctly shown/hidden and managed by the preference screen because they don't hold any hierarchical data!\n    // also gray out and enabled states won't work\n    // if you want to place some custom content wrap it inside a `BasePreference` (if you want the default title/subtitle/icon/content layout) \n    // or inside a `BasePreferenceContainer` if you want to place plain content\n\n    // Custom 1 - default button inside the content area wrapped as preference =&gt; this will work correctly even if used in sub preferences and it will automatically support enabled/disabling\n    BasePreference(\n        title = { Text(\"A custom preference\") },\n        subtitle = { Text(\"Showing a button\") },\n        icon = { Icon(Icons.Default.Android, null) }\n    ) {\n        Button(onClick = {\n            // ...\n        }) {\n            Icon(Icons.Default.Android, null)\n        }\n    }\n\n    // Custom 2 - completely free content =&gt; this will also work correctly even if used in sub preferences and it will automatically support enabled/disabling\n    // but it allows you to wrap ANY composable inside it\n    BasePreferenceContainer(\n        modifier = Modifier.padding(16.dp),\n        preferenceStyle = PreferenceStyleDefaults.item()\n    ) { modifier -&gt;\n        Button(\n            onClick = {\n                // ...\n        }) {\n            Text(\"Button\")\n        }\n    }\n}\n</code></pre>"},{"location":"pages/compose/composepreferences/#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"pages/compose/composepreferences/#modules-and-extensions","title":"Modules and Extensions","text":"Info Preference Preview Module <code>core</code> PreferenceInfo.kt<pre><code>fun PreferenceScope.PreferenceInfo(\n    // Special\n    onLongClick: (() -&gt; Unit)? = null,\n    ignoreMinItemHeight: Boolean = false,\n    alignment: Alignment.Vertical = Alignment.CenterVertically,\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre> Divider Preference Preview Module <code>core</code> PreferenceDivider.kt<pre><code>fun PreferenceScope.PreferenceDivider(\n    // Special\n    // Base Preference\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled\n) {\n</code></pre> Section Header Preference Preview Module <code>core</code> PreferenceSectionHeader.kt<pre><code>fun PreferenceScope.PreferenceSectionHeader(\n    // Special\n    // Base Preference\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    title: @Composable () -&gt; Unit,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = PreferenceStyleDefaults.header()\n) {\n</code></pre> Bool Preference Preview Module <code>bool</code> PreferenceBool.kt<pre><code>fun PreferenceScope.PreferenceBool(\n    style: PreferenceBool.Style = PreferenceBool.Style.Switch,\n    // Special\n    value: Boolean,\n    onValueChange: (selected: Boolean) -&gt; Unit,\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre> Button Preference Preview Module <code>button</code> PreferenceButton.kt<pre><code>fun PreferenceScope.PreferenceButton(\n    // Special\n    onClick: (() -&gt; Unit),\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre> Color Preference Preview Module <code>color</code> PreferenceColor.kt<pre><code>fun PreferenceScope.PreferenceColor(\n    // Special\n    value: Color,\n    onValueChange: (value: Color) -&gt; Unit,\n    alphaSupported: Boolean = true,\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre> Date Preference Preview Module <code>date</code> PreferenceDate.kt<pre><code>fun PreferenceScope.PreferenceDate(\n    // Special\n    value: LocalDate,\n    onValueChange: (date: LocalDate) -&gt; Unit,\n    firstDayOfWeek: DayOfWeek = DayOfWeek.MONDAY,\n    formatter: (date: LocalDate) -&gt; String = {\n        it.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG))\n    },\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre> Input Preference Preview Module <code>input</code> <code>input</code> PreferenceInputText.kt<pre><code>fun PreferenceScope.PreferenceInputText(\n    // Special\n    value: String,\n    onValueChange: (value: String) -&gt; Unit,\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre> PreferenceInputNumber.kt<pre><code>fun &lt;T : Number&gt; PreferenceScope.PreferenceInputNumber(\n    // Special\n    value: T,\n    onValueChange: (value: T) -&gt; Unit,\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre> Input List Preview Module <code>list</code> <code>list</code> <p>This preference does offer 2 different options, one that allows you to only select a single item and one that allows to select mutliple items.</p> PreferenceList.kt<pre><code>fun &lt;T&gt; PreferenceScope.PreferenceList(\n    style: PreferenceList.Style = PreferenceList.Style.Dialog,\n    // Special\n    value: T,\n    onValueChange: (value: T) -&gt; Unit,\n    items: List&lt;T&gt;,\n    itemTextProvider: @Composable (item: T) -&gt; String,\n    itemIconProvider: (@Composable (item: T) -&gt; Unit)? = null,\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre> PreferenceListMulti.kt<pre><code>fun &lt;T&gt; PreferenceScope.PreferenceListMulti(\n    // Special\n    value: List&lt;T&gt;,\n    onValueChange: (value: List&lt;T&gt;) -&gt; Unit,\n    items: List&lt;T&gt;,\n    itemTextProvider: @Composable (item: T) -&gt; String,\n    itemIconProvider: (@Composable (item: T) -&gt; Unit)? = null,\n    formatter: @Composable (selected: List&lt;T&gt;) -&gt; String = { selected -&gt;\n        selected.map {\n            itemTextProvider(it)\n        }.joinToString(\";\")\n    },\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre> Number Preference Preview Module <code>number</code> PreferenceNumber.kt<pre><code>fun &lt;T : Number&gt; PreferenceScope.PreferenceNumber(\n    style: PreferenceNumber.Style = PreferenceNumber.Style.Picker,\n    // Special\n    value: T,\n    onValueChange: (value: T) -&gt; Unit,\n    min: T,\n    max: T,\n    stepSize: T,\n    formatter: (value: T) -&gt; String = { it.toString() },\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre> Time Preference Preview Module <code>time</code> PreferenceTime.kt<pre><code>fun PreferenceScope.PreferenceTime(\n    // Special\n    value: LocalTime,\n    onValueChange: (value: LocalTime) -&gt; Unit,\n    is24Hours: Boolean = DateFormat.is24HourFormat(LocalContext.current),\n    formatter: (time: LocalTime) -&gt; String = getDefaultTimeFormatter(is24Hours),\n    // Base Preference\n    title: @Composable () -&gt; Unit,\n    enabled: Dependency = Dependency.Enabled,\n    visible: Dependency = Dependency.Enabled,\n    subtitle: @Composable (() -&gt; Unit)? = null,\n    icon: (@Composable () -&gt; Unit)? = null,\n    preferenceStyle: PreferenceStyle = LocalPreferenceSettings.current.itemStyle\n) {\n</code></pre>"},{"location":"pages/compose/composethemer/","title":"ComposeThemer","text":"<p>This is a full compose theme engine that handles applying a theme as well as updating the system ui elements. Extendible and allows to simply apply user selected themes inside your app.</p>"},{"location":"pages/compose/composethemer/#screenshots","title":"Screenshots","text":"Demo"},{"location":"pages/compose/composethemer/#features","title":"Features","text":"<ul> <li>allows to define custom user themes and applies them automatically</li> <li>ability to retrieve all registered themes</li> <li>supports system ui theming (status bar + navigation bar)</li> <li>build on top of <code>MaterialTheme</code></li> <li>comes with optional 55 build-in themes</li> </ul> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"pages/compose/composethemer/#dependencies","title":"Dependencies","text":"Dependency Version Infos Compose BOM <code>2024.02.01</code> Mapping Material3 <code>1.2.0</code>"},{"location":"pages/compose/composethemer/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval composethemer = \"&lt;LATEST-VERSION&gt;\" \n\n// include necessary modules\n\n// core module\nimplementation(\"com.github.MFlisar.ComposeThemer:core:$composethemer\")\n\n// extension module\nimplementation(\"com.github.MFlisar.ComposeThemer:themes:$composethemer\")\n</code></pre>"},{"location":"pages/compose/composethemer/#setup-library","title":"Setup Library","text":"<pre><code>class App : Application() {\n\n    override fun onCreate() {\n\n        // register all available themes or register your custom themes\n        ComposeTheme.register(\n            *ComposeThemes\n                .getAll()\n                .toTypedArray()\n        )\n    }\n\n}\n</code></pre>"},{"location":"pages/compose/composethemer/#usage","title":"Usage","text":"<pre><code>// simply wrap your composable content inside ComposeTheme as if you would use MaterialTheme directly\nval baseTheme = remember { mutableStateOf(ComposeTheme.BaseTheme.System) }\nval dynamic = remember { mutableStateOf(false) }\nval theme = remember { mutableStateOf(\"green\") } // the key of an registered theme\nval state = ComposeTheme.State(baseTheme, dynamic, theme)\nComposeTheme(state = state) {\n    // content\n}\n</code></pre>"},{"location":"pages/compose/composethemer/#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"pages/compose/composethemer/#modules-and-extensions","title":"Modules and Extensions","text":"<p>There only exists on very small extension for this library.</p> Extension Themes <p>This extension adds a collection of default themes that you can use if needed.</p> <pre><code>// returns a list of all existing default themes\nval themes = ComposeTheme.getRegisteredThemes()\n\n// or get the default themes one by one (all named like Theme*)\nval theme = ThemeAmberBlue.get()\n// ... there are 56 predefined themes availabe ...\n</code></pre>"},{"location":"pages/compose/composethemer/#advanced-usage","title":"Advanced Usage","text":"Custom Statusbar / Navigationbar Colors <p>The default themes do use functions that allow you to define some custom statusbar / navigation settings if desired. Supported colors are <code>default</code>, <code>primary</code> and <code>surface</code> (those colors derive their color from the theme itself) or <code>custom</code> for fully user defined colors.</p> <pre><code>// get all themes with custom statusbar / navigation bar\nComposeTheme.getRegisteredThemes(\n    statusBarColor = ComposeTheme.SystemUIColor.Surface,\n    navigationBarColor = ComposeTheme.SystemUIColor.Surface\n)\n\n// or get a single predefined theme with custom statusbar / navigation bar\nval theme = ThemeAmberBlue.get(\n    statusBarColor = ComposeTheme.SystemUIColor.Surface,\n    navigationBarColor = ComposeTheme.SystemUIColor.Surface\n)\n</code></pre>"},{"location":"pages/compose/composethemer/#credits","title":"Credits","text":"<p>This library contains 54 predefined color schemes inside the <code>themes</code> module. Those are all directly copied from FlexColorScheme - a very useful homepage that allows you to create your own themes and also contains 54 predefined themes already. With the permission of Rydmike I just copied every single predefined theme from his homepage and added it to this library.</p>"},{"location":"pages/libraries/","title":"My General Libraries","text":"<p>Here you find some of my useful general libraries not specific for views or compose.</p> <ul> <li> Lumberjack</li> <li> KotPreferences</li> <li> KotBilling</li> </ul>"},{"location":"pages/libraries/kotbilling/","title":"KotBilling","text":"<p>A kotlin coroutine based solution for handling in app purchases for billing library version 6.</p>"},{"location":"pages/libraries/kotbilling/#features","title":"Features","text":"<ul> <li>exception save, each functions returns a non null sealed class / interface instance</li> <li>simple query function to query a product state: <code>val result = KotBilling.queryProducts(... products ...)</code></li> <li>simple purchase function to buy a product and acknowledge/consume it: <code>val result = KotBilling.purchase(actvity, product, offerToken)</code></li> </ul>"},{"location":"pages/libraries/kotbilling/#dependencies","title":"Dependencies","text":"Dependency Version com.android.billingclient:billing-ktx <code>6.0.1</code>"},{"location":"pages/libraries/kotbilling/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval kotbilling = \"&lt;LATEST-VERSION&gt;\" \n\n// add library dependency\nimplementation(\"com.github.MFlisar.KotBilling:$kotbilling\")\n</code></pre>"},{"location":"pages/libraries/kotbilling/#usage","title":"Usage","text":"<p>It works as simple as following:</p> <pre><code>// --------------------\n// Quering available product(s)\n// --------------------\n\nlifecycleScope.launch(Dispatchers.IO) {\n\n    val result = KotBilling.queryProducts(\n        listOf(/* products to query */)\n    )\n    when (result) {\n        is KBError -&gt; {\n            val connectionState = result.connectionState\n            val errorType = result.errorType\n            // errorType is a sealed class which will tell you the reason and type for the error (connection error, purchase error, acknowledge error, ...)\n            // connectionState will tell you what the connection state was\n        }\n        is KBProductDetailsList -&gt; {\n            if (result.details.isEmpty()) {\n                // most probably only happens if you try this inside a debug app or an app that's not released on the playstore yet\n            } else {\n                // in all other cases you will get a list with products and all their details (same size as the queried products) which you can handle here\n                result.details.forEach {\n                    val product = it.product\n                    val details = it.details\n                    // ... \n                }\n            }\n        }\n    }\n}\n\n// --------------------\n// Quering purchase(s)\n// --------------------\n\nlifecycleScope.launch(Dispatchers.IO) {\n\n    val result = KotBilling.queryPurchases(ProductType.InApp) // or ProductType.Subscription\n    when (result) {\n        is KBError -&gt; {\n            val connectionState = result.connectionState\n            val errorType = result.errorType\n            // errorType is a sealed class which will tell you the reason and type for the error (connection error, purchase error, acknowledge error, ...)\n            // connectionState will tell you what the connection state was\n        }\n        is KBPurchaseQuery -&gt; {\n            if (result.details.isEmpty()) {\n                // user did not purchase anything yet\n            } else {\n                val productType = result.productType\n                val details = result.details\n                // details holds a list of all purchase details which you can handle here\n            }\n        }\n    }\n}\n\n// --------------------\n// Purchasing a product\n// --------------------\n\nlifecycleScope.launch(Dispatchers.IO) {\n    val result = KotBilling.purchase(\n        context,\n        /* product */,\n        /* optional offerToken */\n    )\n    when (result) {\n        is KBError -&gt; {\n            val connectionState = result.connectionState\n            val errorType = result.errorType\n            // errorType is a sealed class which will tell you the reason and type for the error (connection error, purchase error, acknowledge error, ...)\n            // connectionState will tell you what the connection state was\n        }\n        is KBPurchase -&gt; {\n            // success\n            val purchase = result.purchase\n            // purchase holds the purchase details which you can handle here\n        }\n    }\n}\n</code></pre>"},{"location":"pages/libraries/kotbilling/#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p> <p>But be aware, the demo app is not deployed on google play so it won't return any results - still it shows how to use the library.</p>"},{"location":"pages/libraries/kotpreferences/","title":"KotPreferences","text":"<p>With this library you can declare preferences via kotlin delegates and observe and update them via kotlin Flows. This works with any storage implementation, an implementation for JetPack DataStore is provided already.</p>"},{"location":"pages/libraries/kotpreferences/#features","title":"Features","text":"<p>With this library you can declare preferences via kotlin <code>delegates</code> and observe and update them via kotlin <code>Flows</code>. This works with any storage implementation, an implementation for JetPack DataStore is provided already. Additionally there's also an extension to easily integrate this library into your compose app.</p> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"pages/libraries/kotpreferences/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval kotpreferences = \"&lt;LATEST-VERSION&gt;\" \n\n// include necessary modules\n\n// core module\nimplementation(\"com.github.MFlisar.KotPreferences:core:$kotpreferences\")\n\n// storage modules\nimplementation(\"com.github.MFlisar.KotPreferences:datastore:$kotpreferences\")\nimplementation(\"com.github.MFlisar.KotPreferences:encryption-aes:$kotpreferences\")\n\n// extension module\nimplementation(\"com.github.MFlisar.KotPreferences:compose:$kotpreferences\")\n</code></pre>"},{"location":"pages/libraries/kotpreferences/#usage","title":"Usage","text":"Define Preferences <pre><code>object UserSettingsModel : SettingsModel(DataStoreStorage(name = \"user\")) {\n\n    // main data types\n    val someString by stringPref(\"value\")\n    val someBool by boolPref(false)\n    val someInt by intPref(123)\n    val someLong by intPref(123L)\n    val someFloat by intPref(123f)\n    val someDouble by intPref(123.0)\n\n    // enum\n    val someEnum by enumPref(Enum.Value1)\n\n    // custom\n    val someCustomClass by anyStringPref(TestClass.CONVERTER, TestClass()) // converts TestClass to a string and saves this string\n    val someCustomClass by anyIntPref(TestClass.CONVERTER, TestClass())    // converts TestClass to an int and saves this int\n    val someCustomClass by anyLongPref(TestClass.CONVERTER, TestClass())   // converts TestClass to a long and saves this long\n\n    // sets\n    val someStringSet by stringSetPref(setOf(\"a\"))\n    val someIntSet by intSetPref(setOf(1))\n    val someLongSet by longSetPref(setOf(1L))\n    val someFloatSet by floatSetPref(setOf(1f))\n    val someDoubleSet by doubleSetPref(setOf(1.0))\n\n    // NULLABLE vs NON NULLABLE\n    val nonNullableString by stringPref()\n    val nullableString by nullableStringPref()\n    val nonNullableInt by intPref()\n    val nullableInt by nullableIntPref()\n    val nonNullableFloat by floatPref()\n    val nullableFloat by nullableFloatPref()\n    val nonNullableDouble by doublePref()\n    val nullableDouble by nullableDoublePref()\n    val nonNullableLong by longPref()\n    val nullableLong by nullableLongPref()\n    val nonNullableBool by boolPref()\n    val nullableBool by nullableBoolPref()\n    // custom\n    val someCustomClass by nullableAnyStringPref(TestClass.CONVERTER, TestClass())\n    val someCustomClass by nullableAnyIntPref(TestClass.CONVERTER, TestClass())\n    val someCustomClass by nullableAnyLongPref(TestClass.CONVERTER, TestClass())\n}\n</code></pre> Observe/Read Preferences <pre><code>// 1) simply observe a setting\nUserSettingsModel.name.observe(lifecycleScope) {\n    L.d { \"name = $it\"}\n}\n\n// 2) direct read (not recommended if not necessary but may be useful in many cases =&gt; simply returns flow.first() in a blocking way)\nval name = UserSettingsModel.name.value\n\n// 3) observe a setting once\nUserSettingsModel.name.observeOnce(lifecycleScope) {\n    L.d { \"name = $it\"}\n}\n\n// 4) observe ALL settings\nUserSettingsModel.changes.onEach {\n    L.d { \"[ALL SETTINGS OBSERVER] Setting '${it.setting.key}' changed its value to ${it.value}\" }\n}.launchIn(lifecycleScope)\n\n// 5) observe SOME settings\nUserSettingsModel.changes\n    .filter {\n        it.setting == UserSettingsModel.name ||\n        it.setting == UserSettingsModel.age\n    }.onEach {\n        // we know that either the name or the age changes\n        L.d { \"[SOME SETTINGS OBSERVER] Setting '${it.setting.key}' changed its value to ${it.value}\" }\n    }.launchIn(lifecycleScope)\n\n// 6) read multiple settings in a suspending way\nlifecycleScope.launch(Dispatchers.IO) {\n    val name = UserSettingsModel.childName1.flow.first()\n    val alive = DemoSettingsModel.alive.flow.first()\n    val hairColor = DemoSettingsModel.hairColor.flow.first()\n    withContext(Dispatchers.Main) {\n        textView.text = \"Informations: $name, $alive, $hairColor\"\n    }\n}\n</code></pre> Lifedata <pre><code>val lifedata = UserSettingsModel.name.flow.asLiveData()\n</code></pre> Update preferences <pre><code>lifecycleScope.launch(Dispatchers.IO)  {\n    UserSettingsModel.name.update(\"Some new name\")\n    UserSettingsModel.age.update(30)\n}\n</code></pre> Compose <p>Add the <code>compose</code> module to get following extensions for compose.</p> <pre><code>val name = UserSettingsModel.name.collectAsState()\nval name = UserSettingsModel.name.collectAsStateWithLifecycle()\n\n// simply use the state inside your composables, the state will change whenever the setting behind it will change\n</code></pre>"},{"location":"pages/libraries/kotpreferences/#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"pages/libraries/kotpreferences/#modules-and-extensions","title":"Modules and Extensions","text":"Encryption Module <p>Currently there only exists the AES encryption module. It simple implements a predefined interface that encrypts and decrypts all data before it get's persisted by a storage implementation.</p> <p>This module is placed inside the <code>encrpytion-aes</code> artifact and can simply be used like following:</p> <p>Step 1/2: define the encryption</p> <pre><code>private const val ALGORITHM = StorageEncryptionAES.DEFAULT_ALGORITHM\nprivate const val KEY_ALGORITHM = StorageEncryptionAES.DEFAULT_KEY_ALGORITHM\n// also check out StorageEncryptionAES::generateKey and StorageEncryptionAES::generateIv if you need some helper functions\nprivate val KEY = StorageEncryptionAES.getKeyFromPassword(KEY_ALGORITHM, \"my key\", \"my salt\")\nprivate val BYTE_ARRAY = listOf(0x16, 0x09, 0xc0, 0x4d, 0x4a, 0x09, 0xd2, 0x46, 0x71, 0xcc, 0x32, 0xb7, 0xd2, 0x91, 0x8a, 0x9c)\n    .map { it.toByte() }\n    .toByteArray()\nprivate val IV = StorageEncryptionAES.getIv(BYTE_ARRAY) // byte array must be 16 bytes!\nval ENCRYPTION = StorageEncryptionAES(ALGORITHM, KEY, IV)\n</code></pre> <p>Step 2/2: attach the encryption to your storage instance</p> <pre><code>object MyEncryptedSettingsModel : SettingsModel(\n    DataStoreStorage(\n        name = \"encrypted\",\n        encryption = ENCRYPTION\n    )\n) {\n    // ...\n}\n</code></pre> Storage DataStore Module <p>The <code>Storage</code> is an abstraction to support any storage implementation. The <code>datastore</code> module provides an implementation based on the Android JetPack DataStore.</p> <p>This module is placed inside the <code>datastore</code> artifact and can simple be used like following:</p> <pre><code>object SettingsModel : SettingsModel(\n    DataStoreStorage(\n        name = \"demo_settings\" // file name of preference file\n    )\n) {\n    // ...\n}\n</code></pre> <p>It supports following data types:</p> <ul> <li><code>String</code></li> <li><code>Bool</code></li> <li><code>Int</code></li> <li><code>Long</code></li> <li><code>Float</code></li> <li><code>Double</code></li> <li>Sets:<ul> <li><code>Set&lt;String&gt;</code></li> <li><code>Set&lt;Int&gt;</code></li> <li><code>Set&lt;Long&gt;</code></li> <li><code>Set&lt;Float&gt;</code></li> <li><code>Set&lt;Double&gt;</code></li> </ul> </li> </ul>"},{"location":"pages/libraries/lumberjack/","title":"Lumberjack","text":"<p>This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device.</p> <p>Information</p> <p>The complete library is modularized so that you can just add those parts of it that you are interested in.</p> Timber Support <p>This library fully supports Jack Whartons Timber logging library (v4!). And was even based on it until Lumberjack v6. Beginning with v6 I wrote new modules that work without timber which leads to a smaller and more versitile non timber version. I would advice you to use the non timber versions but if you want to you can simply use the timber modules I provide as well - whatever you prefer.</p> Why did I do this? <p>I decided to not use <code>Timber</code> myself anymore because of following reasons:</p> <ul> <li><code>Timber</code> does explicitly rely on non lazy evaluating logging - it was a decision made by Jack Wharton and was the main reason to write <code>Lumberjack</code> at the beginning</li> <li><code>Timber</code> is restrictive regarding class extensions - in v5 I would need access to a field to continue supporting timber in <code>Lumberjack</code></li> <li><code>Timber</code> is considered as working and feature requests and/or pull requests are not accepted if not really necessary - like e.g. my minimal one here.</li> <li>additionally I always needed to extend the <code>BaseTree</code> from <code>Timber</code> because of the limiting restrictions of the default <code>BaseTree</code> as well as it was to restrictive to make adjustment in it ( I always had a nearly 1:1 copy of it inside my library here). This was needed to allow to adjust the stack trace depth so that <code>Lumberjack</code> will log the correct calling place as a wrapper around <code>Timber</code>.</li> </ul> <p>This lead to my final decision</p> <p><code>Lumberjack</code> does not need <code>Timber</code> and I provide a way to plug in <code>Timber</code> into <code>Lumberjack</code> now - this way using <code>Timber</code> and <code>Lumberjack</code> in combination is possible but not necessary anymore.</p>"},{"location":"pages/libraries/lumberjack/#example-outputs","title":"Example Outputs","text":"Console File Example log file Compose Viewer View Viewer"},{"location":"pages/libraries/lumberjack/#features","title":"Features","text":"<ul> <li>logs will be created with class name, function name abd line number of the calling place automatically</li> <li>logs are evaluated lazily, this means, if the content of a log is not needed, it won't be evaluated</li> <li>loggers can be enabled/disabled  and do support filtering logs</li> <li>supports arbitrary loggers by implementing a single function based interface</li> <li>can be used with a very small custom logging implementation or timber (whatever you prefer)</li> <li>has extensions for<ul> <li>sending a log file via mail (no internet permissions - this is done by appending the log file to an <code>Intent</code> and let the user choose an email client)</li> <li>a log file viewer (view or compose based)</li> <li>a notification extension which allows you to show a notification which can show a non crashing but unexpected error and allows the user to click it and send a log file if desired</li> </ul> </li> </ul> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"pages/libraries/lumberjack/#dependencies","title":"Dependencies","text":"<p>Compose</p> <p>Following dependency only applies to the extension-composeviewer module.</p> Dependency Version Infos Compose BOM <code>2023.10.01</code> Mapping Material3 <code>1.1.2</code> <p>Library</p> Module Dependency Version <code>core</code> - Lumberjack Loggers \u2060 \u2060 <code>implementation-lumberjack</code> - <code>logger-console</code> - <code>logger-file</code> - Timber Loggers \u2060 \u2060 <code>implementation-timber</code> Timber <code>4.7.1</code> <code>logger-timber-console</code> Timber <code>4.7.1</code> <code>logger-timber-file</code> Timberslf4jlogback-android <code>4.7.1</code><code>2.0.7</code><code>3.0.0</code> Common Extensions \u2060 \u2060 <code>extension-feedback</code> FeedbackManager <code>2.0.3</code> <code>extension-notification</code> FeedbackManager <code>2.0.3</code> <code>extension-viewer</code> FastScrollerFeedbackManager <code>1.0.0</code><code>2.0.3</code> <code>extension-composeviewer</code> FeedbackManager <code>2.0.3</code>"},{"location":"pages/libraries/lumberjack/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval lumberjack = \"&lt;LATEST-VERSION&gt;\" \n\n// include necessary modules\n\n// core module\nimplementation(\"com.github.MFlisar.Lumberjack:core:$lumberjack\")\n\n// lumberjack modules\nimplementation(\"com.github.MFlisar.Lumberjack:implementation-lumberjack:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:logger-console:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:logger-file:$lumberjack\")\n\n// timber modules\nimplementation(\"com.github.MFlisar.Lumberjack:implementation-timber:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:logger-timber-console:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:logger-timber-file:$lumberjack\")\n\n// extension modules\nimplementation(\"com.github.MFlisar.Lumberjack:extension-feedback:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:extension-notification:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:extension-viewer:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:extension-composeviewer:$lumberjack\")\n</code></pre>"},{"location":"pages/libraries/lumberjack/#setup-library","title":"Setup Library","text":"Lumberjack VersionTimber Version <pre><code>class App : Application() {\n\n    override fun onCreate() {\n\n         // 1) install the implemantion\n         L.init(LumberjackLogger)\n\n         // 2) install loggers\n         L.plant(ConsoleLogger())\n         val setup = FileLoggerSetup.Daily(this)\n         L.plant(FileLogger(setup))\n    }\n\n}\n</code></pre> <pre><code>class App : Application() {\n\n    override fun onCreate() {\n\n         // 1) install the implemantion\n         L.init(TimberLogger)\n\n         // 2) install loggers (trees) \n         Timber.plant(ConsoleTree())\n         val setup = FileLoggingSetup.DateFiles(this  )\n         Timber.plant(FileLoggingTree(setup))\n    }\n\n}\n</code></pre>"},{"location":"pages/libraries/lumberjack/#usage","title":"Usage","text":"Logging <pre><code>// wherever you want use one of L.* functions for logging\n// all the functions are implemented as inline functions with lambdas - this means,\n// everything inside the lambda is only executed if the log is really ussed\n\nL.d { \"a debug log\" }\nL.e { \"a error log\" }\nL.e(e)\nL.e(e) { \"an exception log with an additonal message\" }\nL.v { \"TEST-LOG - Verbose log...\" }\nL.d { \"TEST-LOG - Debug log...\" }\nL.i { \"TEST-LOG - Info log...\" }\nL.w { \"TEST-LOG - Warn log...\" }\nL.e { \"TEST-LOG - Error log...\" }\nL.wtf { \"TEST-LOG - WTF log...\" }\n\n// optional tags work like following\nL.tag(\"LEVEL\").d { \"Tagged log message...\" }\n\n// you can log something optionally like following\nL.logIf { false }?.d { \"This will never be logged because logIf evaluates to false...\" }\n\n// manual log levels\nL.log(Level.DEBUG) { \"Debug level log via L.log instead of L.d\" }\n</code></pre> Filtering Logs Lumberjack VersionTimber Version <pre><code>// typealias LumberjackFilter = (level: Level, tag: String?, time: Long, fileName: String, className: String, methodName: String, line: Int, msg: String?, throwable: Throwable?) -&gt; Boolean\nval filter = object : LumberjackFilter {\n    override fun invoke(\n        level: Level,\n        tag: String?,\n        time: Long,\n        fileName: String,\n        className: String,\n        methodName: String,\n        line: Int,\n        msg: String?,\n        throwable: Throwable?\n    ): Boolean {\n        // decide if you want to log this message...\n        return true\n    }\n}\n// the filter can then be attached to any logger implementation\nval consoleLogger = ConsoleLogger(filter = filter)\nval fileLogger = FileLogger(filter = filter)\n</code></pre> <p>Lumberjack Version</p> <p>The lumberjack implementation allows you more granular filter options as well as a custom filter for each logger implementation!</p> <pre><code>TimberLogger.filter = object: IFilter {\n    override fun isTagEnabled(baseTree: BaseTree, tag: String): Boolean {\n        // decide if you want to log this tag on this tree...\n        return true\n    }\n    override fun isPackageNameEnabled(packageName: String): Boolean {\n        // decide if you want to log if the log comes from a class within the provided package name\n        return true\n    }\n}\n</code></pre> Other settings <pre><code>// if desired you can enable/disable all logs completely \n// e.g. in a release build like following \n// =&gt; you probably would want to do this inside the application after the init of Lumberjack\nL.enable(BuildConfig.DEBUG)\n\n// Alternatively every logger does support an enabled flag as well\nval consoleLogger = ConsoleLogger(enabled = BuildConfig.DEBUG)\nval fileLogger = FileLogger(enabled = !BuildConfig.DEBUG, ...)\n</code></pre>"},{"location":"pages/libraries/lumberjack/#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"pages/libraries/lumberjack/#modules-and-extensions","title":"Modules and Extensions","text":"<p>Depending on your preferences you must decide yourself if you want to use the timber modules or the non timber modules. My suggestion is to prefer the non timber modules as those will save some space and will allow you to even log in a more flexible way. Despite that, all extensions work with any implementation (timber or non timber one)</p> Extension Feedback <p>This small extension simply allows you to send a log file via mail (no internet connection required). This will be done by sharing the file as email <code>Intent</code>.</p> <pre><code>L.sendFeedback(\n    context = context, \n    receiver = \"some.mail@gmail.com\",\n    attachments = listOfNotNull(&lt;file-logging-setup&gt;.getLatestLogFiles())  \n)\n</code></pre> Extension Notification <p>This small extension provides you with with a few functions to create notifications (for app testers or for the dev for example) that can be clicked and then will allow the user to send the log file to you via the <code>extension-feedback</code>. Or to open the log file by clicking the notification.</p> <pre><code>// shows a notifcation - on notification click the suer can do following:\n// * nothing\n// * send a mail with optional attachments like e.g. log files, database, whatever\n// * execute a custom action\nfun L.showNotification(\n    context: Context,\n    notificationIcon: Int,\n    notificationChannelId: String,\n    notificationId: Int,\n    notificationTitle: String = \"Rare exception found\",\n    notificationText: String = \"Please report this error by clicking this notification, thanks\",\n    clickHandler: NotificationClickHandler\n)\n\n// Click Handlers\n// here's a short overview of the available click handlers\nsealed class NotificationClickHandler {\n\n    class SendFeedback(\n        context: Context,\n        val receiver: String,\n        val subject: String = \"Exception found in ${context.packageName}\",\n        val titleForChooser: String = \"Send report with\",\n        val attachments: List&lt;File&gt; = emptyList()\n    ) : NotificationClickHandler()\n\n    class ClickIntent(\n        val intent: Intent,\n        val apply: ((builder: NotificationCompat.Builder) -&gt; Unit)? = null\n    ): NotificationClickHandler()\n\n    data object None: NotificationClickHandler()\n}   \n</code></pre> Extension ComposeViewer <p>If you use compose in your app you should use this viewer - it allows you to show log files directly inside your app.</p> <pre><code>val showLogViewer = rememberSaveable {\n    mutableStateOf(false)\n}\nLumberjackDialog(\n    visible = showLogViewer,\n    title = \"Logs\",\n    setup = &lt;a file logging setup&gt;,\n    mail = \"some.mail@gmail.com\"\n)\n</code></pre> Compose Viewer Extension Viewer <pre><code>// show the log viewer activity (mail address is optional, \n// if it's null, the send mail entry will be removed from the viewers menu)\nL.showLog(\n    context, \n    fileLoggingSetup, \n    \"some.mail@gmail.com\"\n)\n</code></pre> Viewer"},{"location":"pages/libraries/lumberjack/#advanced-usage","title":"Advanced Usage","text":"<p>Either use the timber version and plug in your custom loggers into timber (check out timber for that please) or simply plug in a custom logger into lumberjack directly if you do not use the timber solution like following - all you need to do is implementing a single function and then add your logger to <code>Lumberjack</code> (following example is the current <code>ConsoleLogger</code> implementation).</p> Custom Logger Example <pre><code>class ConsoleLogger(\n    override var enabled: Boolean = true,\n    override val filter: LumberjackFilter = DefaultLumberjackFilter\n) : ILumberjackLogger {\n\n    override fun log(\n        level: Level,\n        tag: String?,\n        time: Long,\n        fileName: String,\n        className: String,\n        methodName: String,\n        line: Int,\n        msg: String?,\n        throwable: Throwable?\n    ) {\n        val link = \"(${fileName}:${line})\"\n        val log = listOfNotNull(\n            msg,\n            link.takeIf { throwable == null },\n            throwable?.stackTraceToString()?.let { \"\\n$it\" }\n        ).joinToString(\" \")\n        Log.println(level.priority, tag, log)\n    }\n\n}\n</code></pre> <p>That's all. You can do the logging asynchronous as well if you want - just do whatever you want inside your logger implementation.</p>"},{"location":"pages/libraries/lumberjack/#notes","title":"Notes","text":""},{"location":"pages/libraries/lumberjack/#file-loggers","title":"File Loggers","text":"<p>There's something to say about file loggers. The <code>timber</code> version uses <code>slf4j</code> + <code>logback-android</code> which adds quite some overhead to your app. But those libraries are well tested and solid.</p> <p>Beginning with v6 I decided to also provide non timber versions of my library and the file logger for this one does not have any dependencies - it simply logs in a background thread with the help of coroutines. This makes this alternative very tiny.</p>"},{"location":"pages/utilities/","title":"My Utility Libraries","text":"<p>Those are very minimal (a few lines of code and only a few classes) libraries that you can add without any further thought to your project. They offer just what their name suggests, with no or a minimal dependency only.</p> <ul> <li> CacheFileProvider</li> <li> FeedbackManager</li> </ul>"},{"location":"pages/utilities/cachefileprovider/","title":"CacheFileProvider","text":"<p>This is a minimal library with a few lines of code and without dependencies that offers a simple file provider (simple read only access for sharing files with other apps).</p>"},{"location":"pages/utilities/cachefileprovider/#features","title":"Features","text":"<ul> <li>offers functions to copy a file to the underlying <code>FileProvider</code> folder</li> <li>allows to simply share a file without any setup from user side</li> <li>minimal size - contains only 8 functions inside 2 classes</li> </ul>"},{"location":"pages/utilities/cachefileprovider/#dependencies","title":"Dependencies","text":"<p>This library does not have any dependencies!</p>"},{"location":"pages/utilities/cachefileprovider/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval cachefileprovider = \"&lt;LATEST-VERSION&gt;\" \n\n// add library dependency\nimplementation(\"com.github.MFlisar.CacheFileProvider:$cachefileprovider\")\n</code></pre>"},{"location":"pages/utilities/cachefileprovider/#usage","title":"Usage","text":"<p>It works as simple as following:</p> <pre><code>// create a file that can be shared with external apps\nval cacheFile = CachedFileProvider.copyFileToCache(context, file)\nval cacheFile = CachedFileProvider.copyFileToCache(context, uri)\n\n// get the shareable uri for this file\nval uri = CachedFileProvider.getCacheFileUri(context, cacheFile.name)\n\n// now you can share the uri with external apps\n// ATTENTION: if you share the file via an intent,\n// also use Intent.FLAG_GRANT_READ_URI_PERMISSION\n// ...\n</code></pre> <p> Tipp</p> <p>If you want to share the cached file with an email app, then check out FeedbackManager - its an utility based on <code>CacheFileProvider</code> that does exactly that. It also takes care of the above mentioned <code>Intent.FLAG_GRANT_READ_URI_PERMISSION</code>.</p>"},{"location":"pages/utilities/feedbackmanager/","title":"FeedbackManager","text":"<p>This is a very small library that allows you to send feedback from an app without internet permission via email, either directly or via an unintrusive notification.</p>"},{"location":"pages/utilities/feedbackmanager/#features","title":"Features","text":"<ul> <li>send feedback mail via a single function</li> <li>show a feedback notification via a single function</li> <li>no internet permission needed - everything is done via a shared <code>Intent</code> which then can by handled by an installed email app</li> <li>minimal size - only a few functions inside 2 classes</li> </ul>"},{"location":"pages/utilities/feedbackmanager/#dependencies","title":"Dependencies","text":"Dependency Version CacheFileProvider 0.3.0"},{"location":"pages/utilities/feedbackmanager/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval feedbackmanager = \"&lt;LATEST-VERSION&gt;\" \n\n// add library dependency\nimplementation(\"com.github.MFlisar.FeedbackManager:$feedbackmanager\")\n</code></pre>"},{"location":"pages/utilities/feedbackmanager/#usage","title":"Usage","text":"<p>It works as simple as following:</p> <pre><code>val feedback = Feedback(\n    receivers = listOf(\"some.email@gmail.com\"),\n    subject = \"Subject of mail\",\n    text = \"Some text\",\n    textIsHtml = false, // indicates if text is holding html text or plain texz\n    attachments = listOf(\n        FeedbackFile(uri),\n        FeedbackFile(file)\n    )\n)\nfeedback.startEmailChooser(context, titleForChooser)\n</code></pre>"},{"location":"pages/utilities/feedbackmanager/#advanced-usage","title":"Advanced Usage","text":"Create an <code>Intent</code> for later <pre><code>val feedback = Feedback(...)\nval intent = feedback.buildIntent(\n    context = context,\n    chooserTitle = \"Title of the Email Chooser\"\n)\n</code></pre> Show a notification <p>This allows you to show a notification which will start the email chooser if the user clicks on the notification only.</p> <pre><code>val feedback = Feedback(...)\nfeedback.startNotification(\n    context = context,\n    chooserTitle = \"Title of the Email Chooser\"\n    notificationTitle = \"Notification\",\n    notificationText = \"Message\",\n    notificationIcon = R.mipmap.icon,\n    notificationChannel = \"ChannelName\",\n    notificationId = 1234 /* channel id */\n)\n</code></pre>"}]}
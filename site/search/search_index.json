{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Index page...</p>"},{"location":"about/","title":"About","text":"<p>About page...</p>"},{"location":"about/#links","title":"LINKS","text":"<ul> <li>MkDocs Material<ul> <li>Reference</li> <li>Icons</li> </ul> </li> </ul>"},{"location":"about/#rest","title":"REST","text":"<p>https://github.com/MFlisar/Lumberjack/blob/ca0f88f0d6810b7a9d0cd99bb932649c84783109/demo/src/main/java/com/michaelflisar/lumberjack/demo/DemoLogging.kt#L26</p> <p>https://github.com/MFlisar/Lumberjack/blob/ca0f88f0d6810b7a9d0cd99bb932649c84783109/demo/src/main/java/com/michaelflisar/lumberjack/demo/DemoLogging.kt#L26-LL57</p> DemoLogging.kt#L26 <p>About</p> <p>{{ no such element: dict object['libray'] }}</p> <p>Lumberjack...</p> <p></p> Method Description <code>GET</code>      Fetch resource <code>PUT</code>  Update resource <code>DELETE</code>      Delete resource <p>Subscribe to our newsletter</p> <p>Subscribe to our newsletter</p> <p>Send </p> <pre><code>class App : Application() {\n\n    override fun onCreate() {\n\n      // ------------------------\n      // Variant 1: the lumberjack version\n      // ------------------------\n\n      // 1) install the implemantion\n      L.init(LumberjackLogger)\n\n      // 2) install loggers\n      L.plant(ConsoleLogger())\n      val setup = FileLoggerSetup.Daily(this)\n      L.plant(FileLogger(setup))\n\n      // ------------------------\n      // Variant 2: the timber version\n      // ------------------------\n\n      // 1) install the implemantion\n      L.init(TimberLogger)\n\n      // 2) install loggers (trees) \n      Timber.plant(ConsoleTree())\n      val setup = FileLoggingSetup.DateFiles(this  )\n      Timber.plant(FileLoggingTree(setup))\n    }\n\n}\n</code></pre> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol> <pre><code># (1)!\n</code></pre> <ol> <li>Look ma, less line noise!</li> </ol> <p>Phasellus posuere in sem ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Phasellus posuere in sem (1) ut cursus</p> <p>Lorem ipsum dolor sit amet, consectetur (2) adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol> Tab 1Tab 2 <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p> <p>Phasellus posuere in sem ut cursus (1)</p> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre> <pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()  \n  }</code></pre>"},{"location":"libraries/composechangelog/","title":"ComposeChangelog","text":"<p>Changelog...</p>"},{"location":"libraries/composedebugdrawer/","title":"ComposeDebugDrawer","text":"<p>Debug Drawer...</p>"},{"location":"libraries/composedialogs/","title":"ComposeDialogs","text":"<p>Dialogs...</p>"},{"location":"libraries/composepreferences/","title":"ComposePreferences","text":"<p>Preferences...</p>"},{"location":"libraries/lumberjack/","title":"Lumberjack","text":"<p>This is a full logging library with a build in way to log to console, file or any custom place as well as optional extensions to send a log file via mail or show it on the device.</p> <p>Info</p> <p>The complete library is modularized so that you can add just add those parts of it that you are interested in.</p> Timber Support <p>This library fully supports Jack Whartons Timber logging library (v4!). And was even based on it until Lumberjack v6. Beginning with v6 I wrote new modules that work without timber which leads to a smaller and more versitile non timber version. I would advice you to use the non timber versions but if you want to you can simply use the timber modules I provide as well - whatever you prefer.</p> <p>A short summary on why I went this way can be found here</p>"},{"location":"libraries/lumberjack/#example-outputs","title":"Example Outputs","text":"Console File Example log file Compose Viewer View Viewer"},{"location":"libraries/lumberjack/#features","title":"Features","text":"<ul> <li>logs will be created with class name, function name abd line number of the calling place automatically</li> <li>logs are evaluated lazily, this means, if the content of a log is not needed, it won't be evaluated</li> <li>loggers can be enabled/disabled  and do support filtering logs</li> <li>supports arbitrary loggers and provides data like class name, function name, line number</li> <li>can be used with a very small custom logging implementation or timber, whatever you prefer</li> <li>has extensions for<ul> <li>sending a log file via mail (no internet permissions - this is done by appending the log file to an <code>Intent</code> and let the user choose an email client)</li> <li>a log file viewer (view or compose based)</li> <li>a notification extension which allows you to show a notification which can show a non crashing but unexpected error and allows the user to click it and send a log file if desired</li> </ul> </li> </ul> <p>All features are splitted into separate modules, just include the modules you want to use!</p>"},{"location":"libraries/lumberjack/#dependencies","title":"Dependencies","text":"Modules Dependency Version <code>core</code> - Lumberjack Loggers \u2060 \u2060 <code>implementation-lumberjack</code> - <code>logger-console</code> - <code>logger-file</code> - Timber Loggers \u2060 \u2060 <code>implementation-timber</code> Timber <code>4.7.1</code> <code>logger-timber-console</code> Timber <code>4.7.1</code> <code>logger-timber-file</code> Timber <code>4.7.1</code> slf4j <code>2.0.7</code> logback-android <code>3.0.0</code> Common Extensions \u2060 \u2060 <code>extension-feedback</code> FeedbackManager <code>2.0.3</code> <code>extension-notification</code> FeedbackManager <code>2.0.3</code> <code>extension-viewer</code> FastScroller <code>1.0.0</code> <code>extension-viewer</code> - <code>2.0.3</code> <code>extension-composeviewer</code> - <code>2.0.3</code> <p>Following dependency only applies to the extension-composeviewer module:</p> Dependency Version Infos Compose BOM <code>2023.10.01</code> Mapping Material3 <code>1.1.2</code>"},{"location":"libraries/lumberjack/#setup-gradle","title":"Setup Gradle","text":"<p>This library is distributed via JitPack.io.</p> 1/2: Add jitpack to your project's <code>build.gradle</code> <pre><code>repositories {\n    maven { url \"https://jitpack.io\" }\n}\n</code></pre> 2/2: Add dependencies to your module's <code>build.gradle</code> <pre><code>// use the latest version of the library\nval lumberjack = \"&lt;LATEST-VERSION&gt;\" \n\n// include necessary modules\n\n// core modules\nimplementation(\"com.github.MFlisar.Lumberjack:core:$lumberjack\")\n\n// lumberjack modules\nimplementation(\"com.github.MFlisar.Lumberjack:implementation-lumberjack:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:logger-console:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:logger-file:$lumberjack\")\n\n// timber modules\nimplementation(\"com.github.MFlisar.Lumberjack:implementation-timber:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:logger-timber-console:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:logger-timber-file:$lumberjack\")\n\n// extensions modules\nimplementation(\"com.github.MFlisar.Lumberjack:extension-feedback:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:extension-notification:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:extension-viewer:$lumberjack\")\nimplementation(\"com.github.MFlisar.Lumberjack:extension-composeviewer:$lumberjack\")\n</code></pre>"},{"location":"libraries/lumberjack/#setup-library","title":"Setup Library","text":"Lumberjack VersionTimber Version <pre><code>class App : Application() {\n\n    override fun onCreate() {\n\n         // 1) install the implemantion\n         L.init(LumberjackLogger)\n\n         // 2) install loggers\n         L.plant(ConsoleLogger())\n         val setup = FileLoggerSetup.Daily(this)\n         L.plant(FileLogger(setup))\n    }\n\n}\n</code></pre> <pre><code>class App : Application() {\n\n    override fun onCreate() {\n\n         // 1) install the implemantion\n         L.init(TimberLogger)\n\n         // 2) install loggers (trees) \n         Timber.plant(ConsoleTree())\n         val setup = FileLoggingSetup.DateFiles(this  )\n         Timber.plant(FileLoggingTree(setup))\n    }\n\n}\n</code></pre>"},{"location":"libraries/lumberjack/#usage","title":"Usage","text":"Logging <pre><code>// whereever you want use one of L.* functions for logging\n// all the functions are implemented as inline functions with lambdas, this means,\n// everything inside the lambda is only executed if the log is really executed\n\nL.d { \"a debug log\" }\nL.e { \"a error log\" }\nL.e(e)\nL.e(e) { \"an exception log with an additonal message\" }\nL.v { \"TEST-LOG - Verbose log...\" }\nL.d { \"TEST-LOG - Debug log...\" }\nL.i { \"TEST-LOG - Info log...\" }\nL.w { \"TEST-LOG - Warn log...\" }\nL.e { \"TEST-LOG - Error log...\" }\nL.wtf { \"TEST-LOG - WTF log...\" }\n\n// optional tags work like following\nL.tag(\"LEVEL\").d { \"Tagged log message...\" }\n\n// you can log something optionally like following\nL.logIf { false }?.d { \"This will never be logged because logIf evaluates to false...\" }\n\n// manual log levels\nL.log(Level.DEBUG) { \"Debug level log via L.log instead of L.d\" }\n</code></pre> Filtering Logs <pre><code>// for the lumberjack implementation you can provide a custom filter for each logging implementation\n// =&gt; you get ALL data of the log to decide if you want to filter it out (classname, filename, line, log message, level, exception, ...)\n// =&gt; simple provide a `LumberjackFilter` instance when instantiating the loggers\n// definition of the interface looks like following:\n// typealias LumberjackFilter = (level: Level, tag: String?, time: Long, fileName: String, className: String, methodName: String, line: Int, msg: String?, throwable: Throwable?) -&gt; Boolean\nval filter = object : LumberjackFilter {\n    override fun invoke( level: Level, tag: String?, time: Long,fileName: String,className: String,methodName: String,line: Int,msg: String?,throwable: Throwable?): Boolean {\n        // decide if you want to log this message...\n        return true\n    }\n}\nval consoleLogger = ConsoleLogger(filter = filter)\nval fileLogger = FileLogger(filter = filter)\n\n// for the timber implementation you can't filter such granualary, just by tag and package name\nTimberLogger.filter = object: IFilter {\n    override fun isTagEnabled(baseTree: BaseTree, tag: String): Boolean {\n        // decide if you want to log this tag on this tree...\n        return true\n    }\n    override fun isPackageNameEnabled(packageName: String): Boolean {\n      // decide if you want to log if the log comes from a class within the provided package name\n        return true\n    }\n}\n</code></pre> Other settings <pre><code>// if desired you can enable/disable all logs completely \n// e.g. in a release build like following \n// =&gt; you probably would want to do this inside the application after the init of Lumberjack\nL.enable(BuildConfig.DEBUG)\n\n// Alternatively every logger does support an enabled flag as well\nval consoleLogger = ConsoleLogger(enabled = BuildConfig.DEBUG)\nval fileLogger = FileLogger(enabled = !BuildConfig.DEBUG, ...)\n</code></pre>"},{"location":"libraries/lumberjack/#demo","title":"Demo","text":"<p>A full demo is included inside the demo module, it shows nearly every usage with working examples.</p>"},{"location":"libraries/lumberjack/#modules-and-extensions","title":"Modules and Extensions","text":""},{"location":"libraries/lumberjack/#advanced-usage","title":"Advanced Usage","text":""},{"location":"libraries/lumberjack/#notes","title":"Notes","text":""}]}